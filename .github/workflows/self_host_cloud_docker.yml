name: Self-Hosted AppFlowy Cloud Docker Images

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: true
        default: "main"
      custom_tag:
        description: "Custom tag to use (overrides automatic tag generation). Example: 0.9.8"
        required: true
        default: ""
      push_gotrue:
        description: "Push GoTrue image to registry"
        type: boolean
        required: false
        default: false
      push_appflowy_cloud:
        description: "Push AppFlowy Cloud image to registry"
        type: boolean
        required: false
        default: false 
      push_appflowy_worker:
        description: "Push AppFlowy Worker image to registry"
        type: boolean
        required: false
        default: false
      push_appflowy_ai:
        description: "Push AppFlowy AI image to registry"
        type: boolean
        required: false
        default: false
      build_arm64:
        description: "Also build ARM64 images (AMD64 always built)"
        type: boolean
        required: false
        default: true 
      tag_latest:
        description: "Also tag and publish 'latest'"
        type: boolean
        required: false
        default: true
      
env:
  LATEST_TAG: latest
  LOCALHOST_URL: http://localhost
  LOCALHOST_WS: ws://localhost/ws/v1
  LOCALHOST_WS_V2: ws://localhost/ws/v2
  APPFLOWY_REDIS_URI: redis://redis:6379
  APPFLOWY_AI_REDIS_URL: redis://redis:6379
  LOCALHOST_GOTRUE: http://localhost/gotrue
  POSTGRES_PASSWORD: password
  DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
  SQLX_OFFLINE: true
  RUST_TOOLCHAIN: "1.86.0"

jobs:
  gotrue_image:
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"},{"os":"ubuntu-22.04-arm","name":"arm64v8","docker_platform":"linux/arm64"}]' || '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"}]') }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.push_gotrue == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push GoTrue ${{ matrix.job.name }}
        uses: docker/build-push-action@v5
        with:
          context: ./docker/gotrue
          file: ./docker/gotrue/Dockerfile
          platforms: ${{ matrix.job.docker_platform }}
          push: false
          load: true
          cache-from: type=gha,scope=gotrue-${{ matrix.job.name }}
          cache-to: type=gha,mode=max,scope=gotrue-${{ matrix.job.name }}
          tags: |
            appflowyinc/gotrue:${{ env.GIT_TAG }}-${{ matrix.job.name }}
            appflowyinc/gotrue:${{ env.LATEST_TAG }}-${{ matrix.job.name }}

      - name: Save GoTrue image locally
        run: |
          mkdir -p /tmp/docker-images
          docker save appflowyinc/gotrue:${{ env.GIT_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/gotrue_${{ matrix.job.name }}.tar.gz
          docker save appflowyinc/gotrue:${{ env.LATEST_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/gotrue_latest_${{ matrix.job.name }}.tar.gz

      - name: Upload GoTrue image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gotrue-image-${{ matrix.job.name }}
          path: /tmp/docker-images/gotrue_*.tar.gz
          retention-days: 1

      - name: Logout from Docker Hub
        if: always()
        run: docker logout
  gotrue_push:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_gotrue == 'true' }}
    needs: [gotrue_image]
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"name":"amd64"},{"name":"arm64v8"}]' || '[{"name":"amd64"}]') }}
    steps:
      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Download GoTrue image
        uses: actions/download-artifact@v4
        with:
          name: gotrue-image-${{ matrix.job.name }}
          path: /tmp/docker-images

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Load and Push GoTrue
        run: |
          docker load < /tmp/docker-images/gotrue_${{ matrix.job.name }}.tar.gz
          docker load < /tmp/docker-images/gotrue_latest_${{ matrix.job.name }}.tar.gz || true
          if [[ "${{ github.event.inputs.tag_latest }}" == "true" ]]; then
            docker push appflowyinc/gotrue:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          fi
          docker push appflowyinc/gotrue:${{ env.GIT_TAG }}-${{ matrix.job.name }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  gotrue_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_gotrue == 'true' }}
    needs: [gotrue_push]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for gotrue:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: appflowyinc/gotrue:${{ env.GIT_TAG }}
          images: appflowyinc/gotrue:${{ env.GIT_TAG }}-amd64,appflowyinc/gotrue:${{ env.GIT_TAG }}-arm64v8
          push: true

      - name: Create and push manifest for gotrue:latest
        if: ${{ github.event.inputs.tag_latest == 'true' }}
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: appflowyinc/gotrue:${{ env.LATEST_TAG }}
          images: appflowyinc/gotrue:${{ env.LATEST_TAG }}-amd64,appflowyinc/gotrue:${{ env.LATEST_TAG }}-arm64v8
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_cloud_image:
    runs-on: ${{ matrix.job.os }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"},{"os":"ubuntu-22.04-arm","name":"arm64v8","docker_platform":"linux/arm64"}]' || '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"}]') }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ env.IMAGE_NAME }}

      - name: Build ${{ matrix.job.name }}:${{ env.GIT_TAG }} 
        run: |
          echo "::group::build-appflowy-cloud-${{ matrix.job.name }}"
          docker buildx build \
            --platform ${{ matrix.job.docker_platform }} \
            -f ./Dockerfile \
            -t ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} \
            -t ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} \
            --cache-from type=gha,scope=appflowy_cloud-${{ matrix.job.name }} \
            --cache-to type=gha,mode=max,scope=appflowy_cloud-${{ matrix.job.name }} \
            --build-arg PROFILE=release \
            --build-arg FEATURES=${{ secrets.CI_APPFLOWY_CLOUD_FEATURES }} \
            --build-arg APP_VERSION=${{ env.GIT_TAG }} \
            --load \
            --quiet \
            .
          echo "::endgroup::"

      - name: Save AppFlowy Cloud image locally
        run: |
          mkdir -p /tmp/docker-images
          docker save ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_cloud_${{ matrix.job.name }}.tar.gz
          docker save ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_cloud_latest_${{ matrix.job.name }}.tar.gz

      - name: Upload AppFlowy Cloud image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: appflowy-cloud-image-${{ matrix.job.name }}
          path: /tmp/docker-images/appflowy_cloud_*.tar.gz
          retention-days: 1

  wait_for_all_builds:
    runs-on: ubuntu-22.04
    needs: [gotrue_image, appflowy_cloud_image, appflowy_worker_image, appflowy_ai_image]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "All selected image builds have completed"
          echo "GoTrue build: ${{ needs.gotrue_image.result }}"
          echo "AppFlowy Cloud build: ${{ needs.appflowy_cloud_image.result }}"
          echo "AppFlowy Worker build: ${{ needs.appflowy_worker_image.result }}"
          echo "AppFlowy AI build: ${{ needs.appflowy_ai_image.result }}"
          
          # Check if any required builds failed
          if [[ "${{ needs.gotrue_image.result }}" == "failure" ]] || \
             [[ "${{ needs.appflowy_cloud_image.result }}" == "failure" ]] || \
             [[ "${{ needs.appflowy_worker_image.result }}" == "failure" ]] || \
             [[ "${{ needs.appflowy_ai_image.result }}" == "failure" ]]; then
            echo "❌ One or more builds failed"
            exit 1
          else
            echo "✅ All builds completed successfully or were skipped"
          fi

  appflowy_cloud_test:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_cloud == 'true' }}
    needs: [wait_for_all_builds]
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Download GoTrue image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: gotrue-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy Cloud image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-cloud-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy Worker image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-worker-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy AI image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-ai-image-amd64
          path: /tmp/docker-images

      - name: Load all locally built images
        run: |
          # Load all images since they're all built now
          docker load < /tmp/docker-images/gotrue_amd64.tar.gz
          docker load < /tmp/docker-images/gotrue_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_cloud_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_cloud_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_worker_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_worker_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_ai_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_ai_latest_amd64.tar.gz

      - name: Run Docker Compose for testing
        run: |
          # Set environment variables for docker-compose to use locally built images
          export APPFLOWY_CLOUD_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_WORKER_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_AI_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_ADMIN_FRONTEND_VERSION=latest-amd64
          
          # Retag all locally built images to match docker-compose-ci.yml image names
          # Tag GoTrue
          docker tag appflowyinc/gotrue:${{ env.GIT_TAG }}-amd64 appflowyinc/gotrue:${{ env.GIT_TAG }}
          docker tag appflowyinc/gotrue:${{ env.LATEST_TAG }}-amd64 appflowyinc/gotrue:${{ env.LATEST_TAG }}
          
          # Tag AppFlowy Cloud
          docker tag ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_cloud_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_cloud_premium:${{ env.LATEST_TAG }}-amd64
          
          # Tag AppFlowy Worker
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_worker_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_worker_premium:${{ env.LATEST_TAG }}-amd64
          
          # Tag AppFlowy AI
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_ai_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_ai_premium:${{ env.LATEST_TAG }}-amd64
          
          cp deploy.env .env
          sed -i 's|GOTRUE_SMTP_ADMIN_EMAIL=.*|GOTRUE_SMTP_ADMIN_EMAIL=${{ secrets.CI_GOTRUE_SMTP_ADMIN_EMAIL }}|' .env
          sed -i 's|GOTRUE_EXTERNAL_GOOGLE_ENABLED=.*|GOTRUE_EXTERNAL_GOOGLE_ENABLED=true|' .env
          sed -i 's|GOTRUE_MAILER_AUTOCONFIRM=.*|GOTRUE_MAILER_AUTOCONFIRM=false|' .env
          sed -i 's|API_EXTERNAL_URL=http://your-host/gotrue|API_EXTERNAL_URL=http://localhost/gotrue|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_USERNAME=.*|APPFLOWY_MAILER_SMTP_USERNAME=${{ secrets.CI_GOTRUE_SMTP_USER }}|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_PASSWORD=.*|APPFLOWY_MAILER_SMTP_PASSWORD=${{ secrets.CI_GOTRUE_SMTP_PASS }}|' .env
          sed -i 's|APPFLOWY_WEB_URL=.*|APPFLOWY_WEB_URL=http://localhost:3000|' .env
          sed -i 's|.*APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=.*|APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=http://localhost/minio-api|' .env
          sed -i 's|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=.*|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=1|' .env
          
          sed -i 's|AI_APPFLOWY_HOST=.*|AI_APPFLOWY_HOST=http://localhost|' .env
          sed -i 's|AI_OPENAI_API_KEY=.*|AI_OPENAI_API_KEY=${{ secrets.CI_OPENAI_API_KEY }}|' .env
          sed -i 's|AI_OPENAI_API_SUMMARY_MODEL=.*|AI_OPENAI_API_SUMMARY_MODEL="gpt-4o-mini"|' .env
          sed -i 's|ANTHROPIC_API_KEY=.*|ANTHROPIC_API_KEY=${{ secrets.CI_AI_ANTHROPIC_API_KEY }}|' .env
          
          docker compose -f docker-compose-ci.yml up -d --no-build
          docker ps -a

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost/health 2>/dev/null; then
              echo "Health check passed after $((i*5)) seconds"
              exit 0
            fi
            echo "Attempt $i: Health check failed, waiting 5 seconds..."
            sleep 5
          done
          echo "Health check timeout after 300 seconds"
          exit 1

      - name: Test server info
        run: |
          response=$(curl -s http://localhost/api/server-info)
          if [ $? -ne 0 ]; then
            echo "Failed to connect to server-info endpoint"
            exit 1
          fi
          echo "Server info response: $response"
          self_hosted=$(echo "$response" | jq -r '.data.self_hosted')
          if [ "$self_hosted" != "true" ]; then
            echo "ERROR: self_hosted field is '$self_hosted', expected 'true'"
            exit 1
          fi
          echo "✓ Server info test passed: self_hosted is true"

      - name: Stop Docker Compose
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down
          docker ps -a

  appflowy_cloud_push:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_cloud == 'true' }}
    needs: [appflowy_cloud_test]
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"name":"amd64"},{"name":"arm64v8"}]' || '[{"name":"amd64"}]') }}
    steps:
      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Download AppFlowy Cloud image
        uses: actions/download-artifact@v4
        with:
          name: appflowy-cloud-image-${{ matrix.job.name }}
          path: /tmp/docker-images

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Load and Push AppFlowy Cloud
        run: |
          docker load < /tmp/docker-images/appflowy_cloud_${{ matrix.job.name }}.tar.gz
          docker load < /tmp/docker-images/appflowy_cloud_latest_${{ matrix.job.name }}.tar.gz || true
          if [[ "${{ github.event.inputs.tag_latest }}" == "true" ]]; then
            docker push ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          fi
          docker push ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_cloud_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_cloud == 'true' }}
    needs: [appflowy_cloud_push]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for appflowy_cloud:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.GIT_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.GIT_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_cloud:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.GIT_TAG) || '' }}
          push: true

      - name: Create and push manifest for appflowy_cloud:latest
        if: ${{ github.event.inputs.tag_latest == 'true' }}
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.LATEST_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.LATEST_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_cloud:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.LATEST_TAG) || '' }}
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_ai_image:
    runs-on: ${{ matrix.job.os }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"},{"os":"ubuntu-22.04-arm","name":"arm64v8","docker_platform":"linux/arm64"}]' || '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"}]') }}
          
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-AI-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ env.IMAGE_NAME }}

      - name: Build ${{ matrix.job.name }}:${{ env.GIT_TAG }}
        run: |
          echo "::group::build-appflowy-ai-${{ matrix.job.name }}"
          docker buildx build \
            --platform ${{ matrix.job.docker_platform }} \
            -f ./Dockerfile \
            -t ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} \
            -t ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} \
            --cache-from type=gha,scope=appflowy_ai-${{ matrix.job.name }} \
            --cache-to type=gha,mode=max,scope=appflowy_ai-${{ matrix.job.name }} \
            --build-arg GITHUB_TOKEN=${{ secrets.ADMIN_GITHUB_TOKEN }} \
            --build-arg PROFILE=release \
            --build-arg FEATURES=${{ secrets.CI_APPFLOWY_CLOUD_FEATURES }} \
            --build-arg APP_VERSION=${{ env.GIT_TAG }} \
            --load \
            --quiet \
            .
          echo "::endgroup::"

      - name: Save AppFlowy AI image locally
        run: |
          mkdir -p /tmp/docker-images
          docker save ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_ai_${{ matrix.job.name }}.tar.gz
          docker save ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_ai_latest_${{ matrix.job.name }}.tar.gz

      - name: Upload AppFlowy AI image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: appflowy-ai-image-${{ matrix.job.name }}
          path: /tmp/docker-images/appflowy_ai_*.tar.gz
          retention-days: 1

  appflowy_ai_test:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_ai == 'true' }}
    needs: [wait_for_all_builds]
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Download GoTrue image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: gotrue-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy Cloud image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-cloud-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy Worker image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-worker-image-amd64
          path: /tmp/docker-images

      - name: Download AppFlowy AI image (amd64)
        uses: actions/download-artifact@v4
        with:
          name: appflowy-ai-image-amd64
          path: /tmp/docker-images

      - name: Load all locally built images
        run: |
          # Load all images since they're all built now
          docker load < /tmp/docker-images/gotrue_amd64.tar.gz
          docker load < /tmp/docker-images/gotrue_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_cloud_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_cloud_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_worker_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_worker_latest_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_ai_amd64.tar.gz
          docker load < /tmp/docker-images/appflowy_ai_latest_amd64.tar.gz

      - name: Run Docker Compose for testing
        run: |
          # Set environment variables for docker-compose to use locally built images
          export APPFLOWY_CLOUD_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_WORKER_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_AI_VERSION=${{ env.GIT_TAG }}-amd64
          export APPFLOWY_ADMIN_FRONTEND_VERSION=latest-amd64
          
          # Retag all locally built images to match docker-compose-ci.yml image names
          # Tag GoTrue
          docker tag appflowyinc/gotrue:${{ env.GIT_TAG }}-amd64 appflowyinc/gotrue:${{ env.GIT_TAG }}
          docker tag appflowyinc/gotrue:${{ env.LATEST_TAG }}-amd64 appflowyinc/gotrue:${{ env.LATEST_TAG }}
          
          # Tag AppFlowy Cloud
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_cloud_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_cloud:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_cloud_premium:${{ env.LATEST_TAG }}-amd64
          
          # Tag AppFlowy Worker
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_worker_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_worker_premium:${{ env.LATEST_TAG }}-amd64
          
          # Tag AppFlowy AI
          docker tag ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-amd64 appflowyinc/appflowy_ai_premium:${{ env.GIT_TAG }}-amd64
          docker tag ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-amd64 appflowyinc/appflowy_ai_premium:${{ env.LATEST_TAG }}-amd64
          
          cp deploy.env .env
          sed -i 's|GOTRUE_SMTP_ADMIN_EMAIL=.*|GOTRUE_SMTP_ADMIN_EMAIL=${{ secrets.CI_GOTRUE_SMTP_ADMIN_EMAIL }}|' .env
          sed -i 's|GOTRUE_EXTERNAL_GOOGLE_ENABLED=.*|GOTRUE_EXTERNAL_GOOGLE_ENABLED=true|' .env
          sed -i 's|GOTRUE_MAILER_AUTOCONFIRM=.*|GOTRUE_MAILER_AUTOCONFIRM=false|' .env
          sed -i 's|API_EXTERNAL_URL=http://your-host/gotrue|API_EXTERNAL_URL=http://localhost/gotrue|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_USERNAME=.*|APPFLOWY_MAILER_SMTP_USERNAME=${{ secrets.CI_GOTRUE_SMTP_USER }}|' .env
          sed -i 's|APPFLOWY_MAILER_SMTP_PASSWORD=.*|APPFLOWY_MAILER_SMTP_PASSWORD=${{ secrets.CI_GOTRUE_SMTP_PASS }}|' .env
          sed -i 's|APPFLOWY_WEB_URL=.*|APPFLOWY_WEB_URL=http://localhost:3000|' .env
          sed -i 's|.*APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=.*|APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=http://localhost/minio-api|' .env
          sed -i 's|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=.*|APPFLOWY_SPAM_USER_DETECT_THRESHOLD=1|' .env
          
          sed -i 's|AI_APPFLOWY_HOST=.*|AI_APPFLOWY_HOST=http://localhost|' .env
          sed -i 's|AI_OPENAI_API_KEY=.*|AI_OPENAI_API_KEY=${{ secrets.CI_OPENAI_API_KEY }}|' .env
          sed -i 's|AI_OPENAI_API_SUMMARY_MODEL=.*|AI_OPENAI_API_SUMMARY_MODEL="gpt-4o-mini"|' .env
          sed -i 's|ANTHROPIC_API_KEY=.*|ANTHROPIC_API_KEY=${{ secrets.CI_AI_ANTHROPIC_API_KEY }}|' .env
          
          docker compose -f docker-compose-ci.yml up -d --no-build
          docker ps -a

      - name: Wait for services to be ready
        run: |
          echo "Waiting for AppFlowy AI service to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost:5001/health 2>/dev/null; then
              echo "AppFlowy AI health check passed after $((i*5)) seconds"
              break
            fi
            echo "Attempt $i: AppFlowy AI health check failed, waiting 5 seconds..."
            sleep 5
          done

      - name: Test AppFlowy AI health
        run: |
          response=$(curl -s http://localhost:5001/health)
          if [ $? -ne 0 ]; then
            echo "Failed to connect to health endpoint"
            exit 1
          fi
          echo "Server info response: $response"
          self_hosted=$(echo "$response" | jq -r '.self_hosted')
          if [ "$self_hosted" != "true" ]; then
            echo "ERROR: self_hosted field is '$self_hosted', expected 'true'"
            exit 1
          fi
          echo "✓ AppFlowy AI self_hosted is true"

      - name: Stop Docker Compose
        if: always()
        run: |
          docker compose -f docker-compose-ci.yml down
          docker ps -a

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_ai_push:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_ai == 'true' }}
    needs: [appflowy_ai_test]
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"name":"amd64"},{"name":"arm64v8"}]' || '[{"name":"amd64"}]') }}
    steps:
      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Download AppFlowy AI image
        uses: actions/download-artifact@v4
        with:
          name: appflowy-ai-image-${{ matrix.job.name }}
          path: /tmp/docker-images

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Load and Push AppFlowy AI
        run: |
          docker load < /tmp/docker-images/appflowy_ai_${{ matrix.job.name }}.tar.gz
          docker load < /tmp/docker-images/appflowy_ai_latest_${{ matrix.job.name }}.tar.gz || true
          if [[ "${{ github.event.inputs.tag_latest }}" == "true" ]]; then
            docker push ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          fi
          docker push ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_ai_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_ai == 'true' }}
    needs: [appflowy_ai_push]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for appflowy_ai:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.GIT_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.GIT_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_ai:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.GIT_TAG) || '' }}
          push: true

      - name: Create and push manifest for appflowy_ai:latest
        if: ${{ github.event.inputs.tag_latest == 'true' }}
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.LATEST_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_ai:${{ env.LATEST_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_ai:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.LATEST_TAG) || '' }}
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_worker_image:
    runs-on: ${{ matrix.job.os }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"},{"os":"ubuntu-22.04-arm","name":"arm64v8","docker_platform":"linux/arm64"}]' || '[{"os":"ubuntu-22.04","name":"amd64","docker_platform":"linux/amd64"}]') }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          repository: AppFlowy-IO/AppFlowy-Cloud-Premium
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: registry.hub.docker.com/${{ env.IMAGE_NAME }}

      - name: Build and save ${{ matrix.job.name }}:${{ env.GIT_TAG }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.job.docker_platform }}
          file: ./services/appflowy-worker/Dockerfile
          push: false
          load: true
          cache-from: type=gha,scope=appflowy_worker-${{ matrix.job.name }}
          cache-to: type=gha,mode=max,scope=appflowy_worker-${{ matrix.job.name }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
            ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            PROFILE=release
            APP_VERSION=${{ env.GIT_TAG }}

      - name: Save AppFlowy Worker image locally
        run: |
          mkdir -p /tmp/docker-images
          docker save ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_worker_${{ matrix.job.name }}.tar.gz
          docker save ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }} | gzip > /tmp/docker-images/appflowy_worker_latest_${{ matrix.job.name }}.tar.gz

      - name: Upload AppFlowy Worker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: appflowy-worker-image-${{ matrix.job.name }}
          path: /tmp/docker-images/appflowy_worker_*.tar.gz
          retention-days: 1

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_worker_push:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_worker == 'true' }}
    needs: [wait_for_all_builds]
    env:
      IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker
    strategy:
      fail-fast: true
      matrix:
        job: ${{ fromJson(github.event.inputs.build_arm64 == 'true' && '[{"name":"amd64"},{"name":"arm64v8"}]' || '[{"name":"amd64"}]') }}
    steps:
      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Download AppFlowy Worker image
        uses: actions/download-artifact@v4
        with:
          name: appflowy-worker-image-${{ matrix.job.name }}
          path: /tmp/docker-images

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Load and Push AppFlowy Worker
        run: |
          docker load < /tmp/docker-images/appflowy_worker_${{ matrix.job.name }}.tar.gz
          docker load < /tmp/docker-images/appflowy_worker_latest_${{ matrix.job.name }}.tar.gz || true
          if [[ "${{ github.event.inputs.tag_latest }}" == "true" ]]; then
            docker push ${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}-${{ matrix.job.name }}
          fi
          docker push ${{ env.IMAGE_NAME }}:${{ env.GIT_TAG }}-${{ matrix.job.name }}

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  appflowy_worker_manifest:
    runs-on: ubuntu-22.04
    if: ${{ github.event.inputs.push_appflowy_worker == 'true' }}
    needs: [ appflowy_worker_push ]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get git tag
        id: vars
        run: |
          T="${{ github.event.inputs.custom_tag }}"
          echo "GIT_TAG=$T" >> $GITHUB_ENV

      - name: Create and push manifest for appflowy_worker:version
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.GIT_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.GIT_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_worker:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.GIT_TAG) || '' }}
          push: true

      - name: Create and push manifest for appflowy_worker:latest
        if: ${{ github.event.inputs.tag_latest == 'true' }}
        uses: Noelware/docker-manifest-action@0.4.3
        with:
          inputs: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.LATEST_TAG }}
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/appflowy_worker:${{ env.LATEST_TAG }}-amd64${{ github.event.inputs.build_arm64 == 'true' && format(',{0}/appflowy_worker:{1}-arm64v8', secrets.DOCKER_HUB_USERNAME, env.LATEST_TAG) || '' }}
          push: true

      - name: Logout from Docker Hub
        if: always()
        run: docker logout

  cleanup_artifacts:
    runs-on: ubuntu-22.04
    if: always()
    needs: [gotrue_manifest, appflowy_cloud_manifest, appflowy_ai_manifest, appflowy_worker_manifest]
    steps:
      - name: Delete GoTrue artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            gotrue-image-amd64
            gotrue-image-arm64v8
          failOnError: false

      - name: Delete AppFlowy Cloud artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            appflowy-cloud-image-amd64
            appflowy-cloud-image-arm64v8
          failOnError: false

      - name: Delete AppFlowy AI artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            appflowy-ai-image-amd64
            appflowy-ai-image-arm64v8
          failOnError: false

      - name: Delete AppFlowy Worker artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            appflowy-worker-image-amd64
            appflowy-worker-image-arm64v8
          failOnError: false

      - name: Cleanup summary
        run: |
          echo "✅ Artifact cleanup completed"
          echo "All Docker image artifacts have been deleted to free up storage space"
